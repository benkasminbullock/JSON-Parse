error: invalid

error: unexpected character
%%description:

An unexpected character (byte) was encountered in the input. For
example, when looking at the beginning of a string supposedly
containing JSON, if the module encounters a plus sign, it will give an
error like this:

!+!

The message always includes a list of what characters are allowed.

If there is some recognizable structure being parsed, the error
message will include its starting point in the form "starting from
byte n":

!{"this":"\a"}!

A feature of JSON is that parsing it requires only one byte to be
examined at a time. Thus almost all parsing problems can be handled
using the "Unexpected character" error type, including spelling errors
in literals:

![true,folse]!

and the missing second half of a surrogate pair:

!["\udc00? <-- should be a second half here"]!

All kinds of errors can occur parsing numbers, for example a missing
fraction,

![1.e9]!

and a leading zero,

![0123]!

The error message is this complicated because all of the following are
valid here: whitespace: C<[0 ]>; comma: C<[0,1]>, end of array:
C<[0]>, dot: C<[0.1]>, or exponential: C<[0e0]>.

These are all handled by this error.  Thus the error messages are a
little confusing as diagnostics.

Versions of this module prior to 0.29 gave more informative messages
like "leading zero in number". (The messages weren't documented.) The
reason to change over to the single message was because it makes the
parsing code simpler, and because the testing code described in
L</TESTING> makes use of the internals of this error to check that the
error message produced actually do correspond to the invalid and valid
bytes allowed by the parser, at the exact byte given.

This is a bytewise error, thus for example if a miscoded UTF-8 appears
in the input, an error message saying what bytes would be valid at
that point will be printed.

[% INCLUDE "bad-utf8.pl" | xtidy %]

prints

[% INCLUDE "bad-utf8.txt" | xtidy %]

%%

error: unexpected end of input
%%description:

The end of the string was encountered before the end of whatever was
being parsed was. For example, if a quote is missing from the end of
the string, it will give an error like this:

!{"first":"Suzuki","second":"Murakami","third":"Asada}!

%%

error: not surrogate pair
%%description:

While parsing a string, a surrogate pair was encountered. While trying
to turn this into UTF-8, the second half of the surrogate pair turned
out to be an invalid value.

!["\uDC00\uABCD"]!

%%

error: empty input
%%description:

This error occurs for an input which is an empty (no length or
whitespace only) or an undefined value.

!!

Prior to version 0.49, this error was produced by
L</assert_valid_json> only, but it is now also produced by
L</parse_json>.

%%

error: name is not unique
%%description:

This error occurs when parsing JSON when the user has chosen
L</detect_collisions>. For example an input like

!{"hocus":1,"pocus":2,"hocus":3}!

where the JSON object has two keys with the same name, C<hocus>. The
terminology "name is not unique" is from the JSON specification.

%%
